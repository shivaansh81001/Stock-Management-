/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package deskapp;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author RAJEEV
 */
public class adduser extends javax.swing.JFrame {

    /**
     * Creates new form adduser
     */
    public adduser() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        r1 = new javax.swing.JRadioButton();
        r2 = new javax.swing.JRadioButton();
        t1 = new javax.swing.JTextField();
        t2 = new javax.swing.JTextField();
        t3 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        ta1 = new javax.swing.JTextArea();
        cb1 = new javax.swing.JComboBox<>();
        fetch = new javax.swing.JButton();
        add1 = new javax.swing.JButton();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        p1 = new javax.swing.JPasswordField();
        jLabel7 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        search = new javax.swing.JButton();
        dc = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocation(new java.awt.Point(200, 200));

        jLabel1.setText("name");

        jLabel2.setText("gender");

        jLabel3.setText("phone");

        jLabel4.setText("empid");

        jLabel5.setText("address");

        jLabel6.setText("type");

        buttonGroup1.add(r1);
        r1.setText("male");

        buttonGroup1.add(r2);
        r2.setText("female");

        ta1.setColumns(20);
        ta1.setRows(5);
        jScrollPane1.setViewportView(ta1);

        cb1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "choose operator", "admin", "employee" }));

        fetch.setText("fetch");
        fetch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fetchActionPerformed(evt);
            }
        });

        add1.setText("add user");
        add1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add1ActionPerformed(evt);
            }
        });

        update.setText("update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        delete.setText("delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        jLabel7.setText("password");

        jButton1.setText("clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("exit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "name", "gender", "phone", "empid", "DOB(yyyy-mm-dd)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
            table.getColumnModel().getColumn(1).setResizable(false);
            table.getColumnModel().getColumn(2).setResizable(false);
            table.getColumnModel().getColumn(3).setResizable(false);
            table.getColumnModel().getColumn(4).setResizable(false);
        }

        search.setText("search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        jLabel8.setText("date of birth");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(add1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(update)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel6)
                                .addComponent(jLabel1)
                                .addComponent(jLabel7)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jLabel5))
                            .addComponent(jLabel8))
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(r1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(r2))
                                    .addComponent(t1)
                                    .addComponent(t2)
                                    .addComponent(t3)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cb1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(jScrollPane1)
                                    .addComponent(p1))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(search)
                                    .addComponent(fetch, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(dc, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(search))
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(r1)
                            .addComponent(r2))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(t2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(t3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(fetch))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(dc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cb1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(p1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(delete)
                    .addComponent(update)
                    .addComponent(add1))
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void add1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add1ActionPerformed
        String path="jdbc:mysql://localhost/";
        String place="shivam";
        String user="root";
        String password="";
        try{
            Connection conn=(Connection)DriverManager.getConnection(path+place,user,password);
            String qy1="insert into empinfo values(?,?,?,?,?,?)";
            String qy2="insert into user values(?,?,?)";
            try{
                PreparedStatement st1=(PreparedStatement)conn.prepareStatement(qy1);
                
                st1.setString(1,t1.getText());
                if(r1.isSelected()){
                     st1.setString(2,"male");
                }
                else{
                    st1.setString(2,"female");
                }
                st1.setString(3,t2.getText());
                st1.setString(4,t3.getText());
                
                st1.setString(5,ta1.getText());
                SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
                String date=sdf.format(dc.getDate());
                st1.setString(6,date);
                int rowcount=st1.executeUpdate();
                if(rowcount==1)
                {
                JOptionPane.showMessageDialog(rootPane, "User Added Successfully");
                this.dispose();
                adduser au=new adduser();
                au.setVisible(true);
                }
                
                
            }
            catch(Exception e){
              JOptionPane.showMessageDialog(rootPane,"first table error"+e);
            }
            try{
                PreparedStatement st2=(PreparedStatement)conn.prepareStatement(qy2);
                st2.setString(1, t3.getText());
                if(cb1.getSelectedItem()=="admin"){
                    st2.setString(3,"admin");
                }
                else if(cb1.getSelectedItem()=="employee"){
                    
                    st2.setString(3,"employee");
                }
                st2.setString(2,p1.getText());
                
                int rowcount=st2.executeUpdate();
                if(rowcount==1)
                {
                JOptionPane.showMessageDialog(rootPane, "username password added successfully");
                clear();
                }
            }
            
            catch(Exception e){
                JOptionPane.showMessageDialog(rootPane,"second table error"+e);
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, "connectivity error");
        }
    }//GEN-LAST:event_add1ActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        String path="jdbc:mysql://localhost/";
        String place="shivam";
        String user="root";
        String password="";
        try 
            {
            Connection conn= (Connection) DriverManager.getConnection(path+place, user, password);
            String qy="update empinfo set name=?, gender= ?, phone=?, empid=?,address=?,dob=? where empid=?";
            String q2y="update user set type=? where"
            + " username=?";
            try
            {
                PreparedStatement st=(PreparedStatement) conn.prepareStatement(qy);
                st.setString(1,t1.getText());
                if(r1.isSelected())
                {
                    st.setString(2,"Male");
                }
                else
                {
                    st.setString(2,r2.getText());
                }
                st.setString(3,t2.getText());
                st.setString(4,t3.getText());
                

                st.setString(5,ta1.getText());
                SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
                String date=sdf.format(dc.getDate());
                st.setString(6,date);
                st.setString(7,t3.getText());
                

                int rowcount=st.executeUpdate();
                if(rowcount==1)
                {
                    JOptionPane.showMessageDialog(rootPane, "User Updated Successfully");
                    this.dispose();
                    adduser au=new adduser();
                    au.setVisible(true);
                }
                //clear_page();

                }
                catch (Exception ex)
                {
                JOptionPane.showMessageDialog(rootPane, "first table error "+ex);
            }
            try{
                 PreparedStatement st2=(PreparedStatement) conn.prepareStatement(qy);

                st2.setString(1,t3.getText());
                st2.setString(2,p1.getText());
                st2.setString(3,cb1.getSelectedItem().toString());
                st2.setString(4,t3.getText());
                JOptionPane.showMessageDialog(rootPane,"username password updated");
                clear();
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(rootPane,"second table error"+e);
            }

            } 
 catch (SQLException ex)
 {
 JOptionPane.showMessageDialog(rootPane, "Database Connection Error"+ex);
 }
 


    }//GEN-LAST:event_updateActionPerformed

    private void fetchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fetchActionPerformed
        // TODO add your handling code here:
       String path="jdbc:mysql://localhost/";
        String place="shivam";
        String user="root";
        String password="";
        try{
            Connection conn=(Connection)DriverManager.getConnection(path+place,user,password);
            String qy1="select * from empinfo where empid=?";
            String qy2="select * from user where username=? ";
            String qy3="select * from empinfo where empid=?";
            try{
                PreparedStatement st=(PreparedStatement)conn.prepareStatement(qy1);
                PreparedStatement st2=(PreparedStatement)conn.prepareStatement(qy2);
                st.setString(1,t3.getText());
                ResultSet rst=st.executeQuery();
                st2.setString(1,t3.getText());
                ResultSet rst2=st2.executeQuery();
                if(rst.next()){
                    t1.setText(rst.getString("name"));
                    if(rst.getString("gender").equalsIgnoreCase("male")){
                        r1.setSelected(true);
                    }
                    else{
                        r2.setSelected(true);
                    }
                    t2.setText(rst.getString("phone"));
                    t3.setText(rst.getString("empid"));
                    ta1.setText(rst.getString("address"));
                    dc.setDate(rst.getDate("dob"));
                    if(rst2.next()){
                        if(rst2.getString("type").equalsIgnoreCase("admin")){
                            cb1.setSelectedItem("admin");}
                        else{
                            cb1.setSelectedItem("employee");
                    p1.setText(rst2.getString("password"));
                    p1.setEnabled(false);
                    }
                    }
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(rootPane,"cant fetch data"+e);
            }
            try{
                PreparedStatement st3=(PreparedStatement)conn.prepareStatement(qy3);
                st3.setString(1,t3.getText());
                ResultSet rst=st3.executeQuery();
                DefaultTableModel mymodel= (DefaultTableModel)table.getModel();
                mymodel.setRowCount(0);
                if(rst.next()){
                    do{
                       
                       String n=rst.getString("name");
                       String g=rst.getString("gender");
                       String p=rst.getString("phone");
                       String e=rst.getString("empid");
                       String d=rst.getDate("dob").toString();
                       Object rowdata[]={n,g,p,e,d};
                       mymodel.addRow(rowdata);
                    }
                    while(rst.next());
                }
                else{
                    JOptionPane.showMessageDialog(rootPane,"no more data");
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(rootPane,"cant fetch data into the table"+e);
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(rootPane,"connectivity error"+e);
        }
    }//GEN-LAST:event_fetchActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        clear();
        this.dispose();
        adduser au=new adduser();
        au.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed
void clear(){
    t1.setText("");
        buttonGroup1.clearSelection();
        t2.setText("");
        t3.setText("");
        ta1.setText("");
        cb1.setSelectedItem("choose operator");
        p1.setText("");
        p1.setEnabled(true);
        dc.setCalendar(null);
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
}
    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        String path="jdbc:mysql://localhost/";
        String place="shivam";
        String user="root";
        String password="";
        try{
            Connection conn=(Connection)DriverManager.getConnection(path+place,user,password);
            String qy1="delete from empinfo where empid=?";
            String qy2="delete from user where username=?";
            int r=JOptionPane.showConfirmDialog(rootPane,"are you sure","confirmation",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE);
            if(r==0){
                try{
                    PreparedStatement st=(PreparedStatement)conn.prepareStatement(qy1);
                    st.setString(1,t3.getText());
                    int rowcount=st.executeUpdate();
                    PreparedStatement st2=(PreparedStatement)conn.prepareStatement(qy2);
                    st2.setString(1,t3.getText());
                    int rowcount2=st2.executeUpdate();
                    if(rowcount2==1){


                    }
                    if(rowcount==1){
                        JOptionPane.showMessageDialog(rootPane,"user deleted successfully");
                        this.dispose();
                        adduser au=new adduser();
                        au.setVisible(true);
                        clear(); 
                    }
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(rootPane,"unable to delete user"+e);
                }
            }
                
            
            
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(rootPane,"connectivity error");
        }
                
    }//GEN-LAST:event_deleteActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        String path="jdbc:mysql://localhost/";
        String place="shivam";
        String user="root";
        String password="";
        try{
            Connection conn=(Connection)DriverManager.getConnection(path+place,user,password);
            String qy1="select * from empinfo where name like ?";
            
            try{
                PreparedStatement st=(PreparedStatement)conn.prepareStatement(qy1);
                
                st.setString(1,t1.getText()+"%");
                ResultSet rst=st.executeQuery();
                DefaultTableModel mymodel= (DefaultTableModel)table.getModel();
                mymodel.setRowCount(0);
                if(rst.next()){
                    do{
                       
                       String n=rst.getString("name");
                       String g=rst.getString("gender");
                       String p=rst.getString("phone");
                       String e=rst.getString("empid");
                       String d=rst.getDate("dob").toString();
                       Object rowdata[]={n,g,p,e,d};
                       mymodel.addRow(rowdata);
                    }
                    while(rst.next());
                }
                else{
                    JOptionPane.showMessageDialog(rootPane,"no more data");
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(rootPane,"cant fetch data"+e);
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(rootPane,"connectivity error"+e);
        }
    }//GEN-LAST:event_searchActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        // TODO add your handling code here:
        String e=table.getValueAt(table.getSelectedRow(),3).toString();
//        JOptionPane.showMessageDialog(rootPane,"empid: "+e);
        fetch_data(e);
    }//GEN-LAST:event_tableMouseClicked
 void fetch_data(String emp_n){
     String path="jdbc:mysql://localhost/";
        String place="shivam";
        String user="root";
        String password="";
        try{
            Connection conn=(Connection)DriverManager.getConnection(path+place,user,password);
            String qy1="select * from empinfo where empid=?";
            String qy2="select * from user where username=? ";
            try{
                PreparedStatement st=(PreparedStatement)conn.prepareStatement(qy1);
                PreparedStatement st2=(PreparedStatement)conn.prepareStatement(qy2);
                st.setString(1,emp_n);
                ResultSet rst=st.executeQuery();
                st2.setString(1,emp_n);
                ResultSet rst2=st2.executeQuery();
                if(rst.next()){
                    t1.setText(rst.getString("name"));
                    if(rst.getString("gender").equalsIgnoreCase("male")){
                        r1.setSelected(true);
                    }
                    else{
                        r2.setSelected(true);
                    }
                    t2.setText(rst.getString("phone"));
                    t3.setText(rst.getString("empid"));
                    ta1.setText(rst.getString("address"));
                    dc.setDate(rst.getDate("dob"));
                    if(rst2.next()){
                        if(rst2.getString("type").equalsIgnoreCase("admin")){
                            cb1.setSelectedItem("admin");}
                        else{
                            cb1.setSelectedItem("employee");
                    p1.setText(rst2.getString("password"));
                    p1.setEnabled(false);
                    }
                    }
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(rootPane,"cant fetch data"+e);
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(rootPane,"connectivity error"+e);
        }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(adduser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(adduser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(adduser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(adduser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new adduser().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton add1;
    private javax.swing.ButtonGroup buttonGroup1;
    public javax.swing.JComboBox<String> cb1;
    private com.toedter.calendar.JDateChooser dc;
    public javax.swing.JButton delete;
    private javax.swing.JButton fetch;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    public javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JPasswordField p1;
    public javax.swing.JRadioButton r1;
    public javax.swing.JRadioButton r2;
    private javax.swing.JButton search;
    public javax.swing.JTextField t1;
    public javax.swing.JTextField t2;
    public javax.swing.JTextField t3;
    public javax.swing.JTextArea ta1;
    private javax.swing.JTable table;
    public javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
